package greencode.database;

import greencode.kernel.Console;
import greencode.kernel.GreenCodeConfig;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;

public final class DatabaseStatement implements Statement {
	private final Statement st;
	final ArrayList<ResultSet> resultSets = new ArrayList<ResultSet>();
	
	public DatabaseStatement(Statement s) { this.st = s; }
	
	public ResultSet executeQuery(String sql) throws SQLException {
		if(GreenCodeConfig.DataBase.showResultQuery)
			Console.log(sql);
		
		ResultSet s = this.st.executeQuery(sql);		
		resultSets.add(s);
		return s;		
	}

	public <T> T unwrap(Class<T> iface) throws SQLException { return st.unwrap(iface); }

	public boolean isWrapperFor(Class<?> iface) throws SQLException { return st.isWrapperFor(iface); }

	public int executeUpdate(String sql) throws SQLException { return st.executeUpdate(sql); }

	public void close() throws SQLException { st.close(); }

	public int getMaxFieldSize() throws SQLException { return st.getMaxFieldSize(); }

	public void setMaxFieldSize(int max) throws SQLException { st.setMaxFieldSize(max); }

	public int getMaxRows() throws SQLException { return st.getMaxRows(); }

	public void setMaxRows(int max) throws SQLException { st.setMaxRows(max); }

	public void setEscapeProcessing(boolean enable) throws SQLException { st.setEscapeProcessing(enable); }

	public int getQueryTimeout() throws SQLException { return st.getQueryTimeout(); }

	public void setQueryTimeout(int seconds) throws SQLException { st.setQueryTimeout(seconds); }

	public void cancel() throws SQLException { st.cancel(); }

	public SQLWarning getWarnings() throws SQLException { return st.getWarnings(); }

	public void clearWarnings() throws SQLException { st.clearWarnings(); }

	public void setCursorName(String name) throws SQLException { st.setCursorName(name); }

	public boolean execute(String sql) throws SQLException { return st.execute(sql); }

	public ResultSet getResultSet() throws SQLException { return st.getResultSet(); }

	public int getUpdateCount() throws SQLException { return st.getUpdateCount(); }

	public boolean getMoreResults() throws SQLException { return st.getMoreResults(); }

	public void setFetchDirection(int direction) throws SQLException { st.setFetchDirection(direction); }

	public int getFetchDirection() throws SQLException { return st.getFetchDirection(); }

	public void setFetchSize(int rows) throws SQLException { st.setFetchSize(rows); }

	public int getFetchSize() throws SQLException { return st.getFetchSize(); }

	public int getResultSetConcurrency() throws SQLException { return st.getResultSetConcurrency(); }

	public int getResultSetType() throws SQLException { return st.getResultSetType(); }

	public void addBatch(String sql) throws SQLException { st.addBatch(sql); }

	public void clearBatch() throws SQLException { st.clearBatch(); }

	public int[] executeBatch() throws SQLException { return st.executeBatch(); }

	public Connection getConnection() throws SQLException { return st.getConnection(); }

	public boolean getMoreResults(int current) throws SQLException { return st.getMoreResults(); }

	public ResultSet getGeneratedKeys() throws SQLException { return getGeneratedKeys(); }

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException { return st.executeUpdate(sql, autoGeneratedKeys); }

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException { return st.executeUpdate(sql, columnIndexes); }

	public int executeUpdate(String sql, String[] columnNames) throws SQLException { return st.executeUpdate(sql, columnNames); }

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException { return st.execute(sql, autoGeneratedKeys); }

	public boolean execute(String sql, int[] columnIndexes) throws SQLException { return st.execute(sql, columnIndexes); }

	public boolean execute(String sql, String[] columnNames) throws SQLException { return st.execute(sql, columnNames); }

	public int getResultSetHoldability() throws SQLException { return st.getResultSetConcurrency(); }

	public boolean isClosed() throws SQLException { return st.isClosed(); }

	public void setPoolable(boolean poolable) throws SQLException { st.setPoolable(poolable); }

	public boolean isPoolable() throws SQLException { return st.isPoolable(); }
}
